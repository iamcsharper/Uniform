// import { compile as compileTypescript } from 'json-schema-to-typescript';
import { mkdir, writeFile } from 'fs/promises';
import { resolve } from 'path';
import { format } from 'prettier';

import { ControllerSchema } from '../parse-controller-schema';
import { GeneratorOptions, ucFirst } from '../utils';
import { generateInterface } from './interfaces';
import { generateRoutes } from './route';
import { generateSchemas } from './schemas';

export async function generate(options: GeneratorOptions, schema: ControllerSchema) {
    const interfaces = await generateInterface(options, schema.routeGroups);
    const routes = await generateRoutes(options, schema.routeGroups);
    const schemas = await generateSchemas(options, schema.routeGroups);

    const groupNames = [...schema.routeGroups.keys()];
    await Promise.all(
        groupNames.map(async groupName => {
            const path = resolve(schema.version, options.outDirectory, groupName);
            console.log('Creating dirs...', path);

            await mkdir(path, { recursive: true });

            const typesPath = resolve(path, 'types.ts');

            const groupInterfaces = interfaces.get(groupName)!;

            let typesContent = `
                /* eslint-disable @typescript-eslint/no-empty-interface */

                /**
                 * This file is auto-generated by . Please do not modify it manually.
                  */
            `;

            const interfaceNames: string[] = [];

            console.log('groupInterfaces', groupInterfaces);

            groupInterfaces.forEach(groupInterface => {
                typesContent += `
                    ${groupInterface.params || ''}

                    ${groupInterface.query || ''}

                    ${groupInterface.body || ''}

                    ${groupInterface.response || ''}
                `;

                interfaceNames.push(
                    ...([
                        groupInterface.names.params,
                        groupInterface.names.body,
                        groupInterface.names.query,
                        groupInterface.names.response,
                    ].filter(Boolean) as string[])
                );
            });

            console.log('typesContent=', typesContent);

            typesContent = format(typesContent, options.prettierOptions);

            console.log('Writing types.ts...', typesPath, typesContent.length, 'bytes');
            await writeFile(typesPath, typesContent, { flag: 'w' });

            const routesPath = resolve(path, 'routes.ts');
            const routeCode = routes.get(groupName)!;

            const routesContent = format(
                `
                /**
                 * This file was initially auto-generated. Its content may be changed on the next generation.
                 */
                import { FastifyInstance, FastifyPluginAsync } from 'fastify';
                ${routeCode.imports}

                export const ${ucFirst(groupName)}Routes: FastifyPluginAsync = async (fastify: FastifyInstance) => {
                    ${routeCode.inFunctionBody}
                };
            `,
                options.prettierOptions
            );

            console.log('Writing routes.ts...', routesPath, routesContent.length, 'bytes');
            await writeFile(routesPath, routesContent, { flag: 'w' });

            const schemasPath = resolve(path, 'schemas.ts');
            const groupSchemas = schemas.get(groupName)!;

            const schemasContent = format(
                `
                /**
                 * This file is auto-generated by . Please do not modify it manually.
                 */
                ${groupSchemas.imports}

                ${groupSchemas.routes
                    .map(
                        e => `
                            export interface ${e.schemaTypeName} ${e.schemaTypeContent};
                            export const ${e.schemaObjectName} = ${e.schemaObjectContent};
                        `
                    )
                    .join('\n')}
            `,
                options.prettierOptions
            );

            console.log('Writing schemas.ts...', schemasPath, schemasContent.length, 'bytes');
            await writeFile(schemasPath, schemasContent, { flag: 'w' });
        })
    );
}
